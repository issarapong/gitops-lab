# Part 3: GitOps Introduction

GitOps is a paradigm for managing infrastructure and applications where Git repositories serve as the single source of truth for declarative infrastructure and applications.

## What is GitOps?

GitOps principles:

1. **Declarative**: The entire system is described declaratively
2. **Versioned and Immutable**: Configuration is stored in Git with full history
3. **Pulled Automatically**: Software agents automatically pull changes from Git
4. **Continuously Reconciled**: Software agents continuously reconcile the desired and actual state

## GitOps Workflow

```
┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Developer │    │  Git Repo   │    │ GitOps Tool │    │  Kubernetes │
│             │───▶│             │───▶│             │───▶│   Cluster   │
│   Commits   │    │ Manifests   │    │  (ArgoCD/   │    │             │
│             │    │             │    │   Flux)     │    │             │
└─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘
```

## Setting Up a GitOps Repository

Let's create a sample application and its GitOps configuration.

### Step 1: Create Application Repository Structure

```bash
# Inside the Lima VM
mkdir -p ~/gitops-lab
cd ~/gitops-lab

# Create directory structure
mkdir -p {apps,infrastructure,clusters}/{dev,staging,prod}
mkdir -p apps/sample-app
```

### Step 2: Create a Sample Application

```yaml
# apps/sample-app/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  labels:
    app: sample-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
    spec:
      containers:
      - name: sample-app
        image: nginx:1.21
        ports:
        - containerPort: 80
        env:
        - name: ENVIRONMENT
          value: "development"
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
```

```yaml
# apps/sample-app/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
  labels:
    app: sample-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: sample-app
```

### Step 3: Create Environment-specific Configurations

```bash
# Create environment configs
mkdir -p clusters/dev/sample-app
mkdir -p clusters/staging/sample-app
mkdir -p clusters/prod/sample-app
```

```yaml
# clusters/dev/sample-app/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: dev

resources:
- ../../../apps/sample-app

patches:
- target:
    kind: Deployment
    name: sample-app
  patch: |-
    - op: replace
      path: /spec/replicas
      value: 1
    - op: replace
      path: /spec/template/spec/containers/0/env/0/value
      value: "development"
```

```yaml
# clusters/staging/sample-app/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: staging

resources:
- ../../../apps/sample-app

patches:
- target:
    kind: Deployment
    name: sample-app
  patch: |-
    - op: replace
      path: /spec/replicas
      value: 2
    - op: replace
      path: /spec/template/spec/containers/0/env/0/value
      value: "staging"
```

```yaml
# clusters/prod/sample-app/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: production

resources:
- ../../../apps/sample-app

patches:
- target:
    kind: Deployment
    name: sample-app
  patch: |-
    - op: replace
      path: /spec/replicas
      value: 5
    - op: replace
      path: /spec/template/spec/containers/0/env/0/value
      value: "production"
    - op: replace
      path: /spec/template/spec/containers/0/image
      value: "nginx:1.21-alpine"
```

Let me create these files:

<function_calls>
<invoke name="create_file">
<parameter name="content">apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  labels:
    app: sample-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
    spec:
      containers:
      - name: sample-app
        image: nginx:1.21
        ports:
        - containerPort: 80
        env:
        - name: ENVIRONMENT
          value: "development"
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
